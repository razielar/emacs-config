#+TITLE: EMACS Config for Desktop-devices
#+AUTHOR: Raziel Amador Rios

* PACKAGE MANAGEMENT

** Setup package.el to work with MELPA
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-refresh-contents)
(package-initialize)
#+end_src

** Installing use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+end_src

* WINDOW NAVIGATION 
#+begin_src emacs-lisp
(windmove-default-keybindings 'meta)
#+end_src

* GENERAL USER INTERFACE SETTINGS

** Basic Emacs UI
Show: line-numbers, & column-number. Disable: too-bar, toogle-bar, menu-bar, & emacs-startup-page. 
#+begin_src emacs-lisp
(global-display-line-numbers-mode) ; show line numbers
(column-number-mode t) ; add column number
(tool-bar-mode -1) ; disable tool bar
(scroll-bar-mode -1)
(menu-bar-mode -1) ; disable menu bar
(setq inhibit-startup-screen t) ; inhibit emacs startup page
#+end_src

Truncate lines.
#+begin_src emacs-lisp
(global-visual-line-mode t)
#+end_src

** Modeline
We are using doom-modeline. To work, we need all-the-icons, and then: M-x all-the-icons-install-fonts.
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

** Dashboard
When starting emacs, let's see a Dashboard. We observe the number of loaded packages, 5 recent files, 5 agenda, 3 bookmarks, 3 projects and 3 registers.
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t 
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Welcome Dr. Raziel")
    (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    ;; (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
			    (agenda . 5 )
			    (bookmarks . 3)
			    (projects . 5)
			    (registers . 3)
    ))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
				(bookmarks . "book"))))
#+end_src

*** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.
#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* THEME

We are using monokai-theme as theme. 
#+begin_src emacs-lisp
(use-package monokai-theme
	     :ensure t
	     :config
	     (load-theme 'monokai t))

;(use-package monokai-pro-theme
;	     :ensure t
;	     :config
;	     (load-theme 'monokai-pro t))

;(use-package doom-themes
;             :ensure t)
;(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
;      doom-themes-enable-italic t) ; if nil, italics is universally disabled
;(load-theme 'doom-one t)
#+end_src

* GENERAL KEYBINDIGS

Keybindings using general for buffers, and load file.
#+begin_src emacs-lisp
(use-package general
  :ensure t)
#+end_src

* CORE EMACS FUNCTIONALITIES

** Swiper
Greatly improve search using swiper.
#+begin_src emacs-lisp
(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))
#+end_src

** COMPANY
Company is a text completion framework for Emac. Use company mode in all buffers and turn off tooltips.
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config (setq company-frontends nil)
  :init (add-hook 'after-init-hook 'global-company-mode))
#+end_src

** HEML 
Helm is an Emacs incremental and narrowing framework. It helps to rapidly complete file names,and buffer names.
#+begin_src emacs-lisp
(use-package helm
  :ensure t)

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t
)

(setq helm-autoresize-max-height 40) ;original value was 40
(setq helm-autoresize-min-height 20)
(helm-autoresize-mode 1)
(define-key helm-map (kbd "TAB") 'helm-execute-persistent-action) ; rebind tab to do persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
#+end_src

*** helm-M-x
Configuration of helm-M-x, M-x key-biding, and make helm-M-x fuzzy. 
#+begin_src emacs-lisp
(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; fuzzy matching for helm-M-x
#+end_src

*** helm-buffer-list
Configuration of helm-mini for buffer-list.
#+begin_src emacs-lisp
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(setq helm-buffers-fuzzy-matching t)
#+end_src

*** helm-find-file
Configuration of helm-find-file for Find file.
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match    t) 
(setq helm-locate-fuzzy-match t)
#+end_src

*** helm-recentf
Configuration of helm-recentf for recent-files.
#+begin_src emacs-lisp
(global-set-key (kbd "C-x r") 'helm-recentf)
(setq helm-recentf-fuzzy-match t)
#+end_src

*** helm-show-kill-ring
Configuration of *kill-ring* to easy copy-paste strings
#+begin_src emacs-lisp
(global-set-key (kbd "ESC y") 'helm-show-kill-ring)
#+end_src

** Projectile
To manage projects in Emacs. 
#+begin_src emacs-lisp
(use-package projectile
	     :ensure t
	     :config
	     (projectile-global-mode 1))
#+end_src

** Helm-Projectile
See Projects with Heml. 
#+begin_src emacs-lisp
;(use-package helm-projectile
;	     :ensure t
;)
;(helm-projectile-on)
#+end_src

* EMACS INFORMATION

** Which-key
Help for Emacs shortcuts.
#+begin_src emacs-lisp
(use-package which-key
  :ensure t)
(which-key-mode)
#+end_src

* GENERAL SETUP FOR PROGRAMMING

** Parenthesis
Show and highlight the corresponding parenthesis. Additionally, add color to the parenthesis and allow autopairing. 
#+begin_src emacs-lisp
(use-package paren
  :ensure t
  :config
  (show-paren-mode +1))
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
(use-package flex-autopair
  :ensure t
  :config
  (flex-autopair-mode +1))
#+end_src

* LANGUAGE SUPPORT

Language support for *markdown*, *dockerfiles*, *yaml-files*, & *scala*.
#+begin_src emacs-lisp

; markdown
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))

; Dockerfile
(use-package dockerfile-mode
  :ensure t
  :mode ("Dockerfile\\'" . dockerfile-mode))

; yaml
(use-package yaml-mode
  :ensure t)

; Scala
(use-package scala-mode
  :ensure t
  :interpreter
    ("scala" . scala-mode)
)
#+end_src

* R PROGRAMMING

To program with R in Emacs, we need ESS.
#+begin_src emacs-lisp
(use-package ess
  :ensure t)
#+end_src

Recommended settings for company
#+begin_src emacs-lisp
(setq ess-use-company t
      company-selection-wrap-around t
      company-tooltip-align-annotations t
      company-idle-delay 0.36
      company-minimum-prefix-length 2
      company-tooltip-limit 10)
#+end_src

** R custom functions

We have 19 R custom funcitons to work efficiently in Emacs-R.
#+begin_src emacs-lisp
; Functions:
(defun dotted-symbol-at-point ()
  (with-syntax-table (make-syntax-table (syntax-table))
    (modify-syntax-entry ?. "_")
    (thing-at-point 'symbol)))

(defun pipe_R_operator ()
  "R - %>% operator or pipe operator"
  (interactive)
  (just-one-space 1)
  (insert "%>%")
  (just-one-space 1))

(defun inicio_setup_R ()
  "Insert the inicio setup in R"
  (interactive)
  (insert "library(tidyverse)\nlibrary(magrittr)\nlibrary(janitor)\noptions(stringsAsFactors = F)")
  )

(defun ess-head ()
  "Head n=10 of object"
  (interactive)
  (ess-execute (concat "head(" (dotted-symbol-at-point) ", n=10)\n") t))

(defun ess-tail ()
  "Tail n=10 of object"
  (interactive)
  (ess-execute (concat "tail(" (dotted-symbol-at-point) ", n=10)\n") t))

(defun ess-upper-square ()
  "X[1:5, 1:5]"
  (interactive)
  (ess-execute (concat (dotted-symbol-at-point) "[1:5, 1:5]\n") t))

(defun ess-dim ()
  "dim(X)"
  (interactive)
  (ess-execute (concat "dim(" (dotted-symbol-at-point) ")\n") t))

(defun ess-rownames ()
  "rownames(X)"
  (interactive)
  (ess-execute (concat "rownames(" (dotted-symbol-at-point) ")\n") t))

(defun ess-colnames ()
  "colnames(X)"
  (interactive)
  (ess-execute (concat "colnames(" (dotted-symbol-at-point) ")\n") t))

(defun ess-view ()
  "View(X)"
  (interactive)
  (ess-execute (concat "View(" (dotted-symbol-at-point) ")\n") t))

(defun theme_ggplot ()
  "Insert ggplot theme"
  (interactive)
  (insert "theme_set(theme_light())")
  )

(defun ess-in ()
  "R %in% operator"
  (interactive)
  (just-one-space 1)
  (insert "%in%")
  (just-one-space 1))

(defun ess-ls ()
  "ls()"
  (interactive)
  (ess-execute "ls()\n" t))

(defun ess-length ()
  "length(x)"
  (interactive)
  (ess-execute (concat "length(" (dotted-symbol-at-point) ")\n") t))

(defun ess-table-count ()
  " %>% table(., exclude= NULL)"
  (interactive)
  (just-one-space 1)
  (insert "%>%")
  (just-one-space 1)
  (insert "table(., exclude= NULL)")
  )

(defun dev-off ()
  "dev.off()"
  (interactive)
  (insert "dev.off()")
  )

(defun pdf-save ()
  "save a plot as pdf using default conf"
  (interactive)
  (insert "pdf(file='', paper='a4r', width=0, height=0)")
  )

(defun theme-ggtitle ()
  "Add ggtitle theme: plot.title"
  (interactive)
  (insert "plot.title= element_text(hjust = 0.5)")
  (just-one-space 1)
  )

(defun regex-digit ()
  "Add regex for digit"
  (interactive)
  (insert "[:digit:]")
  )

; Function mappings: 
(use-package ess-mode
  :bind
  (:map ess-mode-map
        ("C-;" . ess-cycle-assign)
	("C-ñ" . 'pipe_R_operator)
	("C-c h" . 'ess-head)
	("C-c t" . 'ess-tail)
	("C-c u" . 'ess-upper-square)
	("C-c d" . 'ess-dim)
	("C-c r" . 'ess-rownames)
	("C-c c" . 'ess-colnames)
	("C-c v" . 'ess-view)
	("C-c i" . 'ess-in)
	("C-c l" . 'ess-ls)
	("C-c g" . 'ess-length)
	("C-c s" . 'inicio_setup_R)
	("C-c C-t" . 'theme_ggplot)
	("C-c a" . 'ess-table-count)
	("C-c C-d" . 'dev-off)
	("C-c C-s" . 'pdf-save)
	("C-c C-i" . 'theme-ggtitle)
	("C-c x" . 'regex-digit)
	)
  (:map inferior-ess-mode-map
        ("C-;" . ess-cycle-assign)
	("C-;" . ess-cycle-assign)
	("C-ñ" . 'pipe_R_operator)
	("C-c h" . 'ess-head)
	("C-c t" . 'ess-tail)
	("C-c u" . 'ess-upper-square)
	("C-c d" . 'ess-dim)
	("C-c r" . 'ess-rownames)
	("C-c c" . 'ess-colnames)
	("C-c v" . 'ess-view)
	("C-c i" . 'ess-in)
	("C-c l" . 'ess-ls)
	("C-c g" . 'ess-length)
	("C-c s" . 'inicio_setup_R)
	("C-c C-t" . 'theme_ggplot)
	("C-c a" . 'ess-table-count)
	("C-c C-d" . 'dev-off)
	("C-c C-s" . 'pdf-save)
	("C-c C-i" . 'theme-ggtitle)
	("C-c x" . 'regex-digit)
	))
#+end_src

* ORG

** ORG UI

Set-on: org-indent-mode, org elipsis, and setup *Agenda*.  
#+begin_src emacs-lisp
(defun razielar/org-mode-setup ()
  (org-indent-mode))

(use-package org
  :ensure t
  :hook (org-mode . razielar/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t)
  (setq org-agenda-files '("~/Documents/git_rep/agenda/nennisiwok.org"))
)
#+end_src

Setup custom bullet list for ORG.
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
)

; Replace list hyphens with dots
(font-lock-add-keywords 'org-mode
			'(("^ *\\([-]\\) "
			   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "➤"))))))
#+end_src

* ADDITIONAL PACKAGES 

** Beacon
This packages helps in highlighting your cursor.
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1)  
)
#+end_src

** Minimap
A minimap sidebar displaying a smaller version of the current buffer on either the left or right side.

| COMMAND      | DESCRIPTION                               | KEYBINDING |
|--------------+-------------------------------------------+------------|
| minimap-mode | /Toggle minimap-mode/                       | C-x v m    |
 
#+begin_src emacs-lisp
(use-package minimap
  :ensure t
  :config
  (setq minimap-window-location 'right)

)
(global-set-key (kbd "C-x v m") 'minimap-mode)
;minimap-width-fraction
;minimap-active-region-background
#+end_src


